# -*- coding: utf-8 -*-
"""Weather Forecasting.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KrgDCjaq8ZCkOMkO6NCZ5gVaD9qPqPlQ

# Weather forecasting

Developed a real-time **weather forecasting** system that combines machine learning with live weather data from the OpenWeatherMap API. The system predicts the likelihood of rain tomorrow using a trained classification model and also forecasts temperature and humidity for the next few hours using regression models.

# **Key Features:**
 Live Weather Data Integration via OpenWeatherMap API

Rain Prediction Model using Random Forest Classifier

 Future Forecasting (Temperature & Humidity) using Random Forest Regressor

 Wind Direction Conversion from degrees to compass points (e.g., N, NW, SE)

Real-time decision support for weather-based planning

# Pipeline
Collect Data: Historical CSV + Live API (OpenWeatherMap)

Preprocess: Clean, encode, select features

Train Models: Classifier (rain) + Regressors (temp, humidity)

Fetch Live Data: Align with model features

Predict: Rain tomorrow + 5-hour forecast

Display: Console or web output

Import required library
"""

import requests # this library to fetch the data from api
import numpy as np # handle for tabular data
import pandas as pd # handle for analysis data
from sklearn.model_selection import train_test_split # split the data on train test
from sklearn.preprocessing import LabelEncoder # convert  dependent column in numerical
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor # to train the model
from sklearn.metrics import mean_squared_error
from datetime import datetime, timedelta
import pytz

# --------- API Configuration ---------
API_KEY = '8f54a19b66e586221d1ec45da54fbdae'
BASE_URL = 'https://api.openweathermap.org/data/2.5/'

# --------- Fetch Current Weather ---------
def get_current_weather(city):
    url = f"{BASE_URL}weather?q={city}&appid={API_KEY}&units=metric"
    response = requests.get(url)
    data = response.json()
    if data.get('cod') != 200:  # Check if the API returned an error code
        return {'error': data.get('message', 'City not found or invalid request.')}
    return {
        'city': data['name'],
        'current_temp': round(data['main']['temp']),
        'feels_like': round(data['main']['feels_like']),
        'temp_min': round(data['main']['temp_min']),
        'temp_max': round(data['main']['temp_max']),
        'humidity': data['main']['humidity'],
        'description': data['weather'][0]['description'],
        'country': data['sys']['country'],
        'wind_gust_dir': data['wind'].get('deg', 0), # Use .get() to handle missing wind direction
        'pressure': data['main']['pressure'],
        'wind_Gust_Speed': data['wind'].get('speed', 0) # Use .get() to handle missing wind speed
    }

# --------- Load & Clean Historical Data ---------
def read_historical_data(filename):
    df = pd.read_csv(filename)
    df = df.dropna().drop_duplicates()
    return df

# --------- Prepare ML Data ---------
def prepare_data(data):
    le = LabelEncoder()
    data['WindGustDir'] = le.fit_transform(data['WindGustDir'])
    data['RainTomorrow'] = le.fit_transform(data['RainTomorrow'])
    X = data[['MinTemp', 'MaxTemp', 'WindGustDir', 'Humidity', 'Pressure', 'Temp']]
    y = data['RainTomorrow']
    return X, y, le

# --------- Train Rain Classifier ---------
def train_rain_model(X, y):
    x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(x_train, y_train)
    y_pred = model.predict(x_test)
    print("✅ Rain Model Trained — MSE:", mean_squared_error(y_test, y_pred))
    return model

# --------- Prepare Data for Regression ---------
def prepare_regression_data(data, feature):
    X, y = [], []
    for i in range(len(data) - 1):
        X.append(data[feature].iloc[i])
        y.append(data[feature].iloc[i + 1])
    X = np.array(X).reshape(-1, 1)
    y = np.array(y)
    return X, y

# --------- Train Regression Model ---------
def train_regression_model(X, y):
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X, y)
    return model

#  --------- Forecast 5 Future Steps ---------
def predict_future(model, current_value):
    predictions = [current_value]
    for _ in range(5):
        next_value = model.predict(np.array([[predictions[-1]]]))
        predictions.append(next_value[0])
    return predictions[1:]

# --------- Convert Wind Degrees to Compass Direction ---------
def deg_to_compass(wind_deg):
    wind_deg = wind_deg % 360
    compass_points = [
        ("N", 0, 11.25), ("NNE", 11.25, 33.75), ("NE", 33.75, 56.25),
        ("ENE", 56.25, 78.75), ("E", 78.75, 101.25), ("ESE", 101.25, 123.75),
        ("SE", 123.75, 146.25), ("SSE", 146.25, 168.75), ("S", 168.75, 191.25),
        ("SSW", 191.25, 213.75), ("SW", 213.75, 236.25), ("WSW", 236.25, 258.75),
        ("W", 258.75, 281.25), ("WNW", 281.25, 303.75), ("NW", 303.75, 326.25),
        ("NNW", 326.25, 348.75), ("N", 348.75, 360)
    ]
    for point, start, end in compass_points:
        if start <= wind_deg < end:
            return point
    return "N/A"


# --------- Main App ---------
def weather_view():
    city = input("🌍 Enter the city name: ").strip()
    current_weather = get_current_weather(city)

    if 'error' in current_weather:
        print(f"Error: {current_weather['error']}")
        return

    historical_data = read_historical_data("/content/weather.csv")

    # Train models
    X, y, le = prepare_data(historical_data)
    rain_model = train_rain_model(X, y)

    # Convert wind degrees to compass direction
    wind_deg = current_weather['wind_gust_dir']
    compass_direction = deg_to_compass(wind_deg)
    # Check if the compass direction is in the label encoder classes before transforming
    compass_direction_encoded = le.transform([compass_direction])[0] if compass_direction in le.classes_ else -1


    current_data = {
        'MinTemp': current_weather['temp_min'],
        'MaxTemp': current_weather['temp_max'],
        'WindGustDir': compass_direction_encoded,
        'Humidity': current_weather['humidity'],
        'Pressure': current_weather['pressure'],
        'Temp': current_weather['current_temp']
    }

    current_df = pd.DataFrame([current_data])
    rain_prediction = rain_model.predict(current_df)[0]

    # Train regression models
    x_temp, y_temp = prepare_regression_data(historical_data, 'Temp')
    x_hum, y_hum = prepare_regression_data(historical_data, 'Humidity')
    temp_model = train_regression_model(x_temp, y_temp)
    hum_model = train_regression_model(x_hum, y_hum)

    # Predict future
    future_temp = predict_future(temp_model, current_weather['temp_min'])
    future_hum = predict_future(hum_model, current_weather['humidity'])

    # Format times
    timezone = pytz.timezone('Asia/Kolkata')
    now = datetime.now(timezone)
    next_hour = now + timedelta(hours=1)
    next_hour = next_hour.replace(minute=0, second=0, microsecond=0)
    future_times = [(next_hour + timedelta(hours=i)).strftime("%H:00") for i in range(5)]

    # Show Output
    print(f"\n📍 Location: {city}, {current_weather['country']}")
    print(f"🌡️ Current Temp: {current_weather['current_temp']}°C (Feels like {current_weather['feels_like']}°C)")
    print(f"🔻 Min Temp: {current_weather['temp_min']}°C  🔺 Max Temp: {current_weather['temp_max']}°C")
    print(f"💧 Humidity: {current_weather['humidity']}%")
    print(f"🌬️ Wind Direction: {compass_direction}")
    print(f"🔎 Description: {current_weather['description']}")
    print(f"🌧️ Rain Tomorrow Prediction: {'Yes' if rain_prediction else 'No'}")

    print("\n📈 Future Temperature (next 5 hours):")
    for time, temp in zip(future_times, future_temp):
        print(f"{time}: {round(temp, 1)}°C")

    print("\n💧 Future Humidity (next 5 hours):")
    for time, hum in zip(future_times, future_hum):
        print(f"{time}: {round(hum, 1)}%")

    # Save the models and the label encoder
    joblib.dump(rain_model, 'rain_predict_model.pkl')
    joblib.dump(temp_model, 'temp_predict_model.pkl')
    joblib.dump(hum_model, 'hum_predict_model.pkl')
    joblib.dump(le, 'wind_dir_encoder.pkl')
    print("\n✅ Models and Label Encoder Saved")


# 👉 Run this function to start the app
weather_view()

"""# Save the model"""

! pip install joblib

import joblib

# Load the models and the label encoder
loaded_rain_model = joblib.load('rain_predict_model.pkl')
loaded_temp_model = joblib.load('temp_predict_model.pkl')
loaded_hum_model = joblib.load('hum_predict_model.pkl')
loaded_le = joblib.load('wind_dir_encoder.pkl')

print(" Models and Label Encoder Loaded")

